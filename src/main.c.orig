#include "../deps/log/log.h"
#include "../deps/threadpool/thpool.h"
#include "config.h"
#include "parser.h"
#include "request.h"
#include "response.h"
#include "utils.h"
#include <arpa/inet.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>

#define MAX_BUF_SIZE 8122
#define MAX_PENDING 21

<<<<<<< HEAD
void serve(void *client_sock) {
    int *client_socket = client_sock;
=======
config *conf = NULL;

typedef struct {
    int client_socket;
    struct sockaddr_in client_address;
} client_socket_info;

void serve(void *client_info) {
    client_socket_info *client_sock_i = (client_socket_info *) client_info;
    int *client_socket = &client_sock_i->client_socket;
>>>>>>> refs/remotes/origin/main
    char buff[MAX_BUF_SIZE];
    const char *connection;
    int recvd_bytes, rl_len, hdr_len;
    bool keep_alive = true;

    do {
        memset(buff, 0, sizeof(buff));
        request_info req_info = {0};
        request_info *req_i = &req_info;
        req_i->client_addr = client_sock_i->client_address;

        if ((recvd_bytes = recv(*client_socket, buff, sizeof(buff), 0)) <= 0) {
            log_error("%s %d", strerror(errno), *client_socket);
            break;
        }
        log_debug(buff);

        if ((rl_len = parse_request_line(buff, recvd_bytes, req_i)) < 0) {
            send_error(*client_socket, BADREQUEST);
            break;
        }
        log_info("Main:%s %s %s %s", req_i->req_type, req_i->file_path, req_i->version, req_i->real_path);


        sc_map_init_str(&req_i->headers, 0, 0);
        if ((hdr_len = parse_headers(buff + rl_len, &req_i->headers)) < 0) {
            send_error(*client_socket, BADREQUEST);
            break;
        }
        resolve_real_path(req_i);

        if (access(req_i->real_path, F_OK) != 0) {
            log_error("File not found: ", req_i->file_path);
            send_error(*client_socket, NOTFOUND);
        }

        if (strcmp(req_i->version, "HTTP/1.1") != 0) {
            log_error("Not supported:%s", req_i->version);
            send_error(*client_socket, VERSIONNOTSUPPORTED);
            break;
        }

        connection = sc_map_get_str(&req_i->headers, "Connection");
        if (connection && strcasecmp(connection, "keep-alive") != 0) {
            keep_alive = false;
        }
        log_debug("Client sent: %s", connection);

        int return_val;
        if (ends_with("cgi", req_i->real_path)) {
            return_val = handle_dynamic_request(client_socket, req_i);
        } else {
            return_val = handle_static_request(client_socket, req_i);
        }
        if (return_val < 0) break;

    } while (keep_alive);
    log_debug(" bye %d", *client_socket);
    // free_request_info(req_i);
    close(*client_socket);
    return;
}

int main(int argv, char *args[]) {
    parse_config("./config.toml");// TODO:sanitize config values

<<<<<<< HEAD
    int port = args[1] ? atoi(args[1]) : (conf->port ? conf->port : 8888);//TODO: if
=======
    uint64_t id = sc_map_get_s64(&conf->identifier, "popo.ch");
    log_debug("root of popo: %s", conf->resources[id].root);

    int port = args[1] ? atoi(args[1]) : (conf->port ? conf->port : 8888);
>>>>>>> refs/remotes/origin/main
    int log_level = args[2] && atoi(args[2]) <= 5 ? atoi(args[2]) : 0;

    log_set_level(log_level);
    // SERVER SOCKET
    struct sockaddr_in server_addr;

    // PF_INET= ipv4, SOCK_STREAM=tcp
    int server_sock = socket(PF_INET, SOCK_STREAM, 0);

    server_addr.sin_family = AF_INET;
    // htons= host to network short
    server_addr.sin_port = htons(port);
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");


    if (bind(server_sock, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {
        log_fatal("Binding error: %s", strerror(errno));
        exit(EXIT_FAILURE);
    }

    log_info("Server listening on %s:%d", inet_ntoa(server_addr.sin_addr), port);

    if (listen(server_sock, MAX_PENDING) < 0) {
        log_fatal("Listening error %s", strerror(errno));
        exit(EXIT_FAILURE);
    }

    threadpool thpool = thpool_init(8);

    while (1) {
        client_socket_info *client_sock_i = malloc(sizeof(client_socket_info));
        unsigned int client_addr_len = sizeof(client_sock_i->client_address);
        // log_debug("%d", thpool_num_threads_working(thpool));
        client_sock_i->client_socket = accept(server_sock, (struct sockaddr *) &client_sock_i->client_address, &client_addr_len);


        log_debug("Created sock: %d", client_sock_i->client_socket);
        if (client_sock_i->client_socket < 0) {
            log_fatal("Accepting Error: %d", strerror(errno));
            exit(EXIT_FAILURE);
        }
        log_info("New connection accepted from %s:%d", inet_ntoa(client_sock_i->client_address.sin_addr), ntohs(client_sock_i->client_address.sin_port));

        // setsockopt(*client_sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

        thpool_add_work(thpool, serve, client_sock_i);
    }
}
